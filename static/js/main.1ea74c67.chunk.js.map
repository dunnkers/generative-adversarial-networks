{"version":3,"sources":["components/GenerativeShowcase.js","components/ModelShowcase.js","App.js","serviceWorker.js","index.js"],"names":["GenerativeShowcase","props","canvasElement","useRef","useState","init","setInit","loading","setLoading","canv","empt","icon","style","width","height","ref","description","extra","onClick","session","tensor","tf","rescaled","predict","output","resizeBilinear","gather","toPixels","current","disabled","ModelShowcase","msg","success","feedback","state","setState","useEffect","modelFile","then","console","log","setTimeout","res","message","failure","warn","background","margin","display","flexDirection","alignItems","textAlign","type","float","undefined","showIcon","maxWidth","minWidth","children","map","child","i","React","cloneElement","key","model","crop","Text","Typography","Link","Paragraph","App","p","process","className","href","src","alt","verticalAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1ea74c67.chunk.js","sourcesContent":["import { Button, Empty, Result } from 'antd';\nimport React, { useRef, useState } from 'react';\nimport * as tf from '@tensorflow/tfjs';\n\nfunction GenerativeShowcase(props) {\n  const canvasElement = useRef(null);\n  const [init, setInit] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const gen = () => {\n    setInit(true);\n    setLoading(true);\n    const session = props.session;\n    const tensor = tf.truncatedNormal([1, 64])\n    \n    const outputData = session.predict(tensor);\n    // const rescaled = outputData.mul(0.5).add(0.5);\n    const rescaled = outputData;\n    const resized = tf.image.resizeBilinear(rescaled, [256, 256]);\n    const output = resized.gather(0);\n    tf.browser.toPixels(output, canvasElement.current);\n    setLoading(false);\n  };\n  \n  const canv = init ? 'inline' : 'none';\n  const empt = init ? 'none' : 'inline';\n\n  return (\n    <Result\n      icon={<div style={{width: 256, height: 256}}>\n        <canvas ref={canvasElement} style={{'display': canv}} />\n        <Empty style={{'display': empt}} \n          description={\n            <span>\n              No image generated yet. Click the button below!\n            </span>\n          }/>\n      </div>}\n      extra={\n        <Button onClick={gen} disabled={!props.session} loading={loading}>\n          Generate image\n        </Button>\n      }\n    />\n  );\n}\n\nexport default GenerativeShowcase;","import React, { useState, useEffect } from 'react';\nimport { Alert, Spin } from 'antd';\nimport GenerativeShowcase from './GenerativeShowcase';\nimport * as tf from '@tensorflow/tfjs';\n\nfunction ModelShowcase(props) {\n  const [state, setState] = useState({\n    msg: 'Loading model...', loading: true, success: false, session: null,\n    feedback: 'Load the model to start making inferences.'\n  });\n\n  // Load model\n  useEffect(() => {\n    if (!state.loading) return; // was not initiated\n\n    tf.loadGraphModel(props.modelFile).then(session => {\n      console.log('Model successfully loaded.')\n\n      // wait a bit before showing result\n      setTimeout(() => {\n        setState({\n          msg: 'Successfully loaded TensorFlow.js model',\n          feedback: 'TensorFlow.js is ready for live inferences.',\n          // loading: false,\n          success: true,\n          session\n        });\n      }, 1500);\n    }, res => {\n      setState({\n        msg: 'Oops, model could not be loaded',\n        feedback: res.message,\n        loading: false,\n        failure: true\n      });\n      console.warn('Model failed to load', res)\n    });\n  }, [props.modelFile, state.loading]);\n\n  return (\n    <div style={{\n        background: 'white', margin: '50px 0',\n        display: 'flex', flexDirection: 'column', alignItems: 'center'\n      }}>\n      <div style={{textAlign: 'center'}}>\n        <Alert\n          message={state.msg}\n          // description={<code>{state.feedback}</code>}\n          type={state.success ? 'success' : \n            (state.failure ? 'error' : 'info')}\n          icon={state.loading ? <Spin style={{ float: 'left' }}/> : undefined}\n          showIcon\n          style={{ maxWidth: '450px', minWidth: '200px' }}\n        />\n      </div>\n\n      {props.children && \n      (props.children.map ? props.children : [props.children])\n        .map((child, i) => {\n        if (child.type === GenerativeShowcase)\n          return React.cloneElement(child, {\n            key: i,\n            session: state.session,\n            model: props.model,\n            crop: props.crop\n          });\n        return child;\n      })}\n    </div>\n  );\n}\n\nexport default ModelShowcase;","import React from 'react';\nimport { Typography } from 'antd';\nimport './App.css';\nimport ModelShowcase from './components/ModelShowcase';\nimport GenerativeShowcase from './components/GenerativeShowcase';\nconst { Text, Link, Paragraph } = Typography;\n\nfunction App() {\n  const p = process.env.PUBLIC_URL;\n\n  return (\n    <article className=\"App\">\n      <header className=\"App-header\">\n        <h1>Painting Van Goghs using GANs</h1>\n        <h4>\n          <Text type=\"secondary\">Using Deep Learning with TensorFlow/Keras</Text>\n        </h4>\n      </header>\n      {/* <ModelShowcase modelFile={p+'/dcgan-mnist/model.json'} model={0}>\n\n        <GenerativeShowcase />\n      </ModelShowcase> */}\n      <Paragraph>\n        This web page allows you to do live inferences on our trained DCGAN model. The model was trained on a Van Gogh paintings <Link href='https://www.kaggle.com/ipythonx/van-gogh-paintings'>dataset</Link>. The training is still in an early phase, so don't expect real painting-like results. Nonetheless, this page exists to demonstrate the capability of loading our model in TensorFlow.js and doing live inferences. So, enjoy making some art in your browser âœ¨.\n      </Paragraph>\n      <ModelShowcase modelFile={p+'/dcgan-gogh/model.json'} model={0}>\n\n        <GenerativeShowcase />\n      </ModelShowcase>\n      <Paragraph type='secondary'>\n        Note generating an image might take a couple seconds: some time is required to let the network pass a random latent input vector through all its layers.\n      </Paragraph>\n      <Paragraph>\n        <small>\n          <Text type='secondary'>\n            &gt; All our code is available on&nbsp;\n            <Link href='https://github.com/dunnkers/generative-adversarial-networks/'>Github <img src={p+'/github32.png'} \n              alt='Github logo'\n              style={{width: 16, verticalAlign: 'text-bottom'}} />\n            </Link>\n          </Text>\n        </small>\n      </Paragraph>\n    </article>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}