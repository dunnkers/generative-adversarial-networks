{"version":3,"sources":["components/GenerativeShowcase.js","components/ModelShowcase.js","App.js","serviceWorker.js","index.js"],"names":["GenerativeShowcase","props","canvasElement","useRef","useState","init","setInit","canv","empt","icon","style","width","height","ref","description","extra","onClick","session","tensor","tf","rescaled","predict","mul","add","output","resizeBilinear","gather","toPixels","current","disabled","ModelShowcase","msg","loading","success","feedback","state","setState","useEffect","modelFile","then","console","log","setTimeout","res","message","failure","warn","background","margin","textAlign","type","float","undefined","showIcon","children","map","child","i","React","cloneElement","key","model","crop","Text","Typography","App","className","p","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"gbA2CeA,MAvCf,SAA4BC,GAC1B,IAAMC,EAAgBC,iBAAO,MADI,EAETC,oBAAS,GAFA,mBAE1BC,EAF0B,KAEpBC,EAFoB,KAgB3BC,EAAOF,EAAO,SAAW,OACzBG,EAAOH,EAAO,OAAS,SAE7B,OACE,kBAAC,IAAD,CACEI,KAAM,yBAAKC,MAAO,CAACC,MAAO,IAAKC,OAAQ,MACrC,4BAAQC,IAAKX,EAAeQ,MAAO,CAAC,QAAWH,KAC/C,kBAAC,IAAD,CAAOG,MAAO,CAAC,QAAWF,GACxBM,YACE,oFAKNC,MACE,kBAAC,IAAD,CAAQC,QA3BF,WACVV,GAAQ,GACR,IAAMW,EAAUhB,EAAMgB,QAChBC,EAASC,IAAmB,CAAC,EAAG,MAGhCC,EADaH,EAAQI,QAAQH,GACPI,IAAI,IAAKC,IAAI,IAEnCC,EADUL,IAASM,eAAeL,EAAU,CAAC,IAAK,MACjCM,OAAO,GAC9BP,IAAWQ,SAASH,EAAQtB,EAAc0B,UAkBhBC,UAAW5B,EAAMgB,SAAvC,qBCiCOa,MA/Df,SAAuB7B,GAAQ,IAAD,EACFG,mBAAS,CACjC2B,IAAK,mBAAoBC,SAAS,EAAMC,SAAS,EAAOhB,QAAS,KACjEiB,SAAU,+CAHgB,mBACrBC,EADqB,KACdC,EADc,KAkC5B,OA3BAC,qBAAU,WACHF,EAAMH,SAEXb,IAAkBlB,EAAMqC,WAAWC,MAAK,SAAAtB,GACtCuB,QAAQC,IAAI,8BAGZC,YAAW,WACTN,EAAS,CACPL,IAAK,0CACLG,SAAU,8CAEVD,SAAS,EACThB,cAED,SACF,SAAA0B,GACDP,EAAS,CACPL,IAAK,kCACLG,SAAUS,EAAIC,QACdZ,SAAS,EACTa,SAAS,IAEXL,QAAQM,KAAK,uBAAwBH,QAEtC,CAAC1C,EAAMqC,UAAWH,EAAMH,UAGzB,yBAAKtB,MAAO,CAAEqC,WAAY,QAASC,OAAQ,WACzC,yBAAKtC,MAAO,CAACuC,UAAW,WACtB,kBAAC,IAAD,CACEL,QAAST,EAAMJ,IAEfmB,KAAMf,EAAMF,QAAU,UACnBE,EAAMU,QAAU,QAAU,OAC7BpC,KAAM0B,EAAMH,QAAU,kBAAC,IAAD,CAAMtB,MAAO,CAAEyC,MAAO,eAAcC,EAC1DC,UAAQ,KAIXpD,EAAMqD,WACNrD,EAAMqD,SAASC,IAAMtD,EAAMqD,SAAW,CAACrD,EAAMqD,WAC3CC,KAAI,SAACC,EAAOC,GACb,OAAID,EAAMN,OAASlD,EACV0D,IAAMC,aAAaH,EAAO,CAC/BI,IAAKH,EACLxC,QAASkB,EAAMlB,QACf4C,MAAO5D,EAAM4D,MACbC,KAAM7D,EAAM6D,OAETN,OCzDPO,EAASC,IAATD,KAqBOE,MAnBf,WAGE,OACE,6BAASC,UAAU,OACjB,4BAAQA,UAAU,cAChB,6DACA,4BACE,kBAACH,EAAD,CAAMb,KAAK,aAAX,+CAGJ,kBAAC,EAAD,CAAeZ,UAAW6B,oDAAuBN,MAAO,GAEtD,kBAAC,EAAD,SCRYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMxC,c","file":"static/js/main.7d4e2054.chunk.js","sourcesContent":["import { Button, Empty, Result } from 'antd';\nimport React, { useRef, useState } from 'react';\nimport * as tf from '@tensorflow/tfjs';\n\nfunction GenerativeShowcase(props) {\n  const canvasElement = useRef(null);\n  const [init, setInit] = useState(false);\n\n  const gen = () => {\n    setInit(true);\n    const session = props.session;\n    const tensor = tf.truncatedNormal([1, 100])\n    \n    const outputData = session.predict(tensor);\n    const rescaled = outputData.mul(0.5).add(0.5);\n    const resized = tf.image.resizeBilinear(rescaled, [256, 256]);\n    const output = resized.gather(0);\n    tf.browser.toPixels(output, canvasElement.current);\n  };\n  \n  const canv = init ? 'inline' : 'none';\n  const empt = init ? 'none' : 'inline';\n\n  return (\n    <Result\n      icon={<div style={{width: 256, height: 256}}>\n        <canvas ref={canvasElement} style={{'display': canv}} />\n        <Empty style={{'display': empt}} \n          description={\n            <span>\n              No image generated yet. Click the button below!\n            </span>\n          }/>\n      </div>}\n      extra={\n        <Button onClick={gen} disabled={!props.session}>\n          Generate image\n        </Button>\n      }\n    />\n  );\n}\n\nexport default GenerativeShowcase;","import React, { useState, useEffect } from 'react';\nimport { Alert, Spin } from 'antd';\nimport GenerativeShowcase from './GenerativeShowcase';\nimport * as tf from '@tensorflow/tfjs';\n\nfunction ModelShowcase(props) {\n  const [state, setState] = useState({\n    msg: 'Loading model...', loading: true, success: false, session: null,\n    feedback: 'Load the model to start making inferences.'\n  });\n\n  // Load model\n  useEffect(() => {\n    if (!state.loading) return; // was not initiated\n\n    tf.loadGraphModel(props.modelFile).then(session => {\n      console.log('Model successfully loaded.')\n\n      // wait a bit before showing result\n      setTimeout(() => {\n        setState({\n          msg: 'Successfully loaded TensorFlow.js model',\n          feedback: 'TensorFlow.js is ready for live inferences.',\n          // loading: false,\n          success: true,\n          session\n        });\n      }, 1500);\n    }, res => {\n      setState({\n        msg: 'Oops, model could not be loaded',\n        feedback: res.message,\n        loading: false,\n        failure: true\n      });\n      console.warn('Model failed to load', res)\n    });\n  }, [props.modelFile, state.loading]);\n\n  return (\n    <div style={{ background: 'white', margin: '50px 0' }}>\n      <div style={{textAlign: 'center'}}>\n        <Alert\n          message={state.msg}\n          // description={<code>{state.feedback}</code>}\n          type={state.success ? 'success' : \n            (state.failure ? 'error' : 'info')}\n          icon={state.loading ? <Spin style={{ float: 'left' }}/> : undefined}\n          showIcon\n        />\n      </div>\n\n      {props.children && \n      (props.children.map ? props.children : [props.children])\n        .map((child, i) => {\n        if (child.type === GenerativeShowcase)\n          return React.cloneElement(child, {\n            key: i,\n            session: state.session,\n            model: props.model,\n            crop: props.crop\n          });\n        return child;\n      })}\n    </div>\n  );\n}\n\nexport default ModelShowcase;","import React from 'react';\nimport { Typography } from 'antd';\nimport './App.css';\nimport ModelShowcase from './components/ModelShowcase';\nimport GenerativeShowcase from './components/GenerativeShowcase';\nconst { Text } = Typography;\n\nfunction App() {\n  const p = process.env.PUBLIC_URL;\n\n  return (\n    <article className=\"App\">\n      <header className=\"App-header\">\n        <h1>Painting Van Goghs using GANs</h1>\n        <h4>\n          <Text type=\"secondary\">Using Deep Learning with TensorFlow/Keras</Text>\n        </h4>\n      </header>\n      <ModelShowcase modelFile={p+'/mnist/model.json'} model={0}>\n\n        <GenerativeShowcase />\n      </ModelShowcase>\n    </article>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}