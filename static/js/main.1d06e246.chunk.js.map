{"version":3,"sources":["workers/inference.js","components/GenerativeShowcase.js","components/ModelShowcase.js","App.js","serviceWorker.js","index.js"],"names":["addMethods","methods","module","exports","w","Worker","name","GenerativeShowcase","props","canvasElement","useRef","useState","init","generating","sentOffscreen","state","setState","useEffect","hasOffscreen","window","offscreen","current","transferControlToOffscreen","worker","postMessage","canvas","a","predict","then","output","console","log","tensor","tf","toPixels","infer","canv","empt","icon","style","width","height","ref","description","extra","onClick","disabled","session","loading","ModelShowcase","msg","success","feedback","loadModel","modelFile","response","result","setTimeout","res","message","failure","warn","background","margin","display","flexDirection","alignItems","textAlign","type","float","undefined","showIcon","maxWidth","minWidth","children","map","child","i","React","cloneElement","key","Text","Typography","Link","Paragraph","App","p","process","InferenceWorker","className","href","src","alt","verticalAlign","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1d06e246.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"loadModel\",\"predict\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"a430f2537b121cbd03a6.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import { Button, Empty, Result } from 'antd';\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as tf from '@tensorflow/tfjs';\n\nfunction GenerativeShowcase(props) {\n  const canvasElement = useRef(null);\n  const [state, setState] = useState({\n    init: false,\n    generating: false,\n    sentOffscreen: false\n  });\n  \n  useEffect(() => {\n    const hasOffscreen = 'OffscreenCanvas' in window;\n    if (!state.sentOffscreen && hasOffscreen) {\n      const offscreen = canvasElement.current.transferControlToOffscreen();\n      props.worker.postMessage({canvas: offscreen}, [offscreen]);\n      setState(state => ({ ...state, sentOffscreen: true }));\n    }\n\n    if (!state.generating) return;\n\n    async function infer() {\n      await props.worker.predict().then(output => {\n        if (output) {\n          console.log('Rendering in browser...');\n          const tensor = new tf.tensor3d(output);\n          tf.browser.toPixels(tensor, canvasElement.current);\n        }\n        setState({ init: true, generating: false, sentOffscreen: true });\n      });\n    }\n    infer();\n  }, [props.worker, state.init, state.generating, state.sentOffscreen]);\n  \n  const canv = state.init ? 'inline' : 'none';\n  const empt = state.init ? 'none' : 'inline';\n\n  return (\n    <Result\n      icon={<div style={{width: 256, height: 256}}>\n        <canvas ref={canvasElement} style={{'display': canv}} />\n        <Empty style={{'display': empt}} \n          description={\n            <span>\n              No image generated yet. Click the button below!\n            </span>\n          }/>\n      </div>}\n      extra={\n        <Button onClick={() => setState({ ...state, 'generating': true })}\n          disabled={!props.session} loading={state.generating}>\n          Generate image\n        </Button>\n      }\n    />\n  );\n}\n\nexport default GenerativeShowcase;","import React, { useState, useEffect } from 'react';\nimport { Alert, Spin } from 'antd';\nimport GenerativeShowcase from './GenerativeShowcase';\n\nfunction ModelShowcase(props) {\n  const [state, setState] = useState({\n    msg: 'Loading model...', loading: true, success: false, session: null,\n    feedback: 'Load the model to start making inferences.'\n  });\n\n  // Load model\n  useEffect(() => {\n    if (!state.loading) return; // was not initiated\n\n    props.worker.loadModel(props.modelFile).then(response => {\n      const { result } = response;\n      if (result) {\n        // wait a bit before showing result\n        setTimeout(() => {\n          setState({\n            msg: 'Successfully loaded TensorFlow.js model',\n            feedback: 'TensorFlow.js is ready for live inferences.',\n            success: true\n          });\n        }, 1500);\n      } else {\n        setState({\n          msg: 'Oops, model could not be loaded',\n          feedback: response.res.message,\n          loading: false,\n          failure: true\n        });\n        console.warn('Model failed to load', response.res)\n      }\n    });\n  }, [props.modelFile, state.loading, props.worker]);\n\n  return (\n    <div style={{\n        background: 'white', margin: '50px 0',\n        display: 'flex', flexDirection: 'column', alignItems: 'center'\n      }}>\n      <div style={{textAlign: 'center'}}>\n        <Alert\n          message={state.msg}\n          // description={<code>{state.feedback}</code>}\n          type={state.success ? 'success' : \n            (state.failure ? 'error' : 'info')}\n          icon={state.loading ? <Spin style={{ float: 'left' }}/> : undefined}\n          showIcon\n          style={{ maxWidth: '450px', minWidth: '200px' }}\n        />\n      </div>\n\n      {props.children && \n      (props.children.map ? props.children : [props.children])\n        .map((child, i) => {\n        if (child.type === GenerativeShowcase)\n          return React.cloneElement(child, {\n            key: i,\n            session: state.success,\n            worker: props.worker\n          });\n        return child;\n      })}\n    </div>\n  );\n}\n\nexport default ModelShowcase;","import React from 'react';\nimport { Typography } from 'antd';\nimport './App.css';\nimport ModelShowcase from './components/ModelShowcase';\nimport GenerativeShowcase from './components/GenerativeShowcase';\nimport InferenceWorker from 'workerize-loader!./workers/inference' // eslint-disable-line import/no-webpack-loader-syntax\nconst { Text, Link, Paragraph } = Typography;\n\n\nfunction App() {\n  const p = process.env.PUBLIC_URL;\n  const worker = InferenceWorker();\n\n  return (\n    <article className=\"App\">\n      <header className=\"App-header\">\n        <h1>Painting Van Goghs using GANs</h1>\n        <h4>\n          <Text type=\"secondary\">Using Deep Learning with TensorFlow/Keras</Text>\n        </h4>\n      </header>\n      <Paragraph>\n        This web page allows you to do live inferences on our trained DCGAN model. The model was trained on a Van Gogh paintings <Link href='https://www.kaggle.com/ipythonx/van-gogh-paintings'>dataset</Link>. The training is still in an early phase, so don't expect real painting-like results. Nonetheless, this page exists to demonstrate the capability of loading our model in TensorFlow.js and doing live inferences. So, enjoy making some art in your browser âœ¨.\n      </Paragraph>\n      <ModelShowcase worker={worker} modelFile={p+'/dcgan-gogh/model.json'} >\n        <GenerativeShowcase />\n      </ModelShowcase>\n      <Paragraph type='secondary'>\n        Note generating an image might take a couple seconds: some time is required to let the network pass a random latent input vector through all its layers.\n      </Paragraph>\n      <Paragraph>\n        <small>\n          <Text type='secondary'>\n            &gt; All our code is available on&nbsp;\n            <Link href='https://github.com/dunnkers/generative-adversarial-networks/'>Github <img src={p+'/github32.png'} \n              alt='Github logo'\n              style={{width: 16, verticalAlign: 'text-bottom'}} />\n            </Link>\n          </Text>\n        </small>\n      </Paragraph>\n    </article>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}